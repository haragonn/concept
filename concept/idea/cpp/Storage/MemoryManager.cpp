/*==============================================================================
	[MemoryManager.cpp]
														Author	:	Keigo Hara
==============================================================================*/
//------------------------------------------------------------------------------
// インクルードファイル
//------------------------------------------------------------------------------
#include "../../h/Storage/MemoryManager.h"

//------------------------------------------------------------------------------
// 整数をキーに関連付け
// 引数　：キー名(const char* pKey),整数の値(int value)
// 戻り値：なし
//------------------------------------------------------------------------------
void MemoryManager::SetInt(const char* pKey, int value)
{
	if(HasKeyInt(pKey)){	// 既にキーが登録されていれば
		mapInt_[pKey] = value;	// 値を更新
		return;
	}
	mapInt_.insert(std::map<const char*, int>::value_type(pKey, value));	// 新規登録
}

//------------------------------------------------------------------------------
// 整数の取得
// 引数　：キー名(const char* pKey)
// 戻り値：正数の値
//------------------------------------------------------------------------------
int MemoryManager::GetInt(const char* pKey)
{
	if(!HasKeyInt(pKey)){ return 0; }	// キーが存在しなければ0を返す
	return mapInt_[pKey];	// 値を返す
}

//------------------------------------------------------------------------------
// 指定したキーと関連付けられた整数が存在するか
// 引数　：キー名(const char* pKey)
// 戻り値：存在するか
//------------------------------------------------------------------------------
bool MemoryManager::HasKeyInt(const char* pKey)
{
	return (mapInt_.find(pKey) != mapInt_.end());	// 検索
}

//------------------------------------------------------------------------------
// 浮動小数点数をキーに関連付け
// 引数　：キー名(const char* pKey),浮動小数点数の値(float value)
// 戻り値：なし
//------------------------------------------------------------------------------
void MemoryManager::SetFloat(const char* pKey, float value)
{
	if(HasKeyFloat(pKey)){	// 既にキーが登録されていれば
		mapFloat_[pKey] = value;	// 値を更新
		return;
	}
	mapFloat_.insert(std::map<const char*, float>::value_type(pKey, value));	// 新規登録
}

//------------------------------------------------------------------------------
// 浮動小数点数の取得
// 引数　：キー名(const char* pKey)
// 戻り値：浮動小数点数の値
//------------------------------------------------------------------------------
float MemoryManager::GetFloat(const char* pKey)
{
	if(!HasKeyFloat(pKey)){ return 0.0f; }	// キーが存在しなければ0.0fを返す
	return mapFloat_[pKey];	// 値を返す
}

//------------------------------------------------------------------------------
// 指定したキーと関連付けられた浮動小数点数が存在するか
// 引数　：キー名(const char* pKey)
// 戻り値：存在するか
//------------------------------------------------------------------------------
bool MemoryManager::HasKeyFloat(const char* pKey)
{
	return (mapFloat_.find(pKey) != mapFloat_.end());	// 検索
}

//------------------------------------------------------------------------------
// 倍精度浮動小数点数をキーに関連付け
// 引数　：キー名(const char* pKey),倍精度浮動小数点数の値(double value)
// 戻り値：なし
//------------------------------------------------------------------------------
void MemoryManager::SetDouble(const char* pKey, double value)
{
	if(HasKeyDouble(pKey)){	// 既にキーが登録されていれば
		mapDouble_[pKey] = value;	// 値を更新
		return;
	}
	mapDouble_.insert(std::map<const char*, double>::value_type(pKey, value));	// 新規登録
}

//------------------------------------------------------------------------------
// 倍精度浮動小数点数の取得
// 引数　：キー名(const char* pKey)
// 戻り値：倍精度浮動小数点数の値
//------------------------------------------------------------------------------
double MemoryManager::GetDouble(const char* pKey)
{
	if(!HasKeyDouble(pKey)){ return 0.0; }	// キーが存在しなければ0.0を返す
	return mapDouble_[pKey];	// 値を返す
}

//------------------------------------------------------------------------------
// 指定したキーと関連付けられた倍精度浮動小数点数が存在するか
// 引数　：キー名(const char* pKey)
// 戻り値：存在するか
//------------------------------------------------------------------------------
bool MemoryManager::HasKeyDouble(const char* pKey)
{
	return (mapDouble_.find(pKey) != mapDouble_.end());	// 検索
}